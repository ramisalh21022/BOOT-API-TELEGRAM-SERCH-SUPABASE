const express = require('express');
const bodyParser = require('body-parser');
const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');

const TOKEN = process.env.TELEGRAM_TOKEN;
const SUPABASE_URL = process.env.SUPABASE_URL;
const SUPABASE_KEY = process.env.SUPABASE_KEY;
const PORT = process.env.PORT || 5000;

const bot = new TelegramBot(TOKEN, { polling: false });
const app = express();
app.use(bodyParser.json());

// clients cache
const clientsCache = new Map();

// webhook endpoint
app.post(`/webhook/${TOKEN}`, (req, res) => {
  bot.processUpdate(req.body);
  res.sendStatus(200);
});

// ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿπŸÖŸäŸÑ ÿ£Ÿà ÿ¨ŸÑÿ®Ÿá ÿ•ÿ∞ÿß ŸÖŸàÿ¨ŸàÿØ
const getOrCreateClient = async (chatId, msg) => {
  let clientId = clientsCache.get(chatId);
  if (clientId) return clientId;

  const phone = msg.from.username ? `@${msg.from.username}` : `tg_${chatId}`;
  const owner_name = `${msg.from.first_name || ''} ${msg.from.last_name || ''}`.trim() || 'ÿ∫Ÿäÿ± ŸÖÿπÿ±ŸàŸÅ';
  const store_name = `Client-${chatId}`;

  // ÿ™ÿ≠ŸÇŸÇ ÿ•ÿ∞ÿß ŸÖŸàÿ¨ŸàÿØ
  const check = await axios.get(`${SUPABASE_URL}/rest/v1/clients?phone=eq.${phone}`, {
    headers: { 'apikey': SUPABASE_KEY, 'Authorization': `Bearer ${SUPABASE_KEY}` }
  });

  let client;
  if (check.data.length > 0) {
    client = check.data[0];
  } else {
    // ÿ•ŸÜÿ¥ÿßÿ° ÿ¨ÿØŸäÿØ
    const response = await axios.post(`${SUPABASE_URL}/rest/v1/clients`, {
      phone, owner_name, store_name, address: null
    }, {
      headers: {
        'apikey': SUPABASE_KEY,
        'Authorization': `Bearer ${SUPABASE_KEY}`,
        'Content-Type': 'application/json',
        'Prefer': 'return=representation'
      }
    });
    client = response.data[0];
  }

  clientsCache.set(chatId, client);
  return client;
};

// ÿßÿ≥ÿ™ŸÇÿ®ÿßŸÑ ÿ±ÿ≥ÿßÿ¶ŸÑ
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const keyword = msg.text?.trim();

  try {
    const client = await getOrCreateClient(chatId, msg);

    // ÿ±ÿ≥ÿßŸÑÿ© ÿßŸÑÿ™ÿ±ÿ≠Ÿäÿ®
    await bot.sendMessage(chatId, `üëã ÿ£ŸáŸÑÿß ${client.owner_name}ÿå ŸÖÿ±ÿ≠ÿ®Ÿãÿß ÿ®ŸÉ ŸÅŸä ŸÖÿ™ÿ¨ÿ±ŸÜÿß!`);

    // ÿ•ÿ∞ÿß ŸÉÿßŸÜÿ™ ÿßŸÑÿ±ÿ≥ÿßŸÑÿ© ŸÖÿ¥ÿßÿ±ŸÉÿ© ÿ±ŸÇŸÖ ÿßŸÑŸáÿßÿ™ŸÅ
    if (msg.contact?.phone_number) {
      // ÿ™ÿ≠ÿØŸäÿ´ ÿ±ŸÇŸÖ ÿßŸÑŸáÿßÿ™ŸÅ ŸÖÿ®ÿßÿ¥ÿ±ÿ© ŸÅŸä Supabase
      const response = await axios.patch(
        `${SUPABASE_URL}/rest/v1/clients?id=eq.${client.id}`,
        { phone: msg.contact.phone_number },
        {
          headers: {
            'apikey': SUPABASE_KEY,
            'Authorization': `Bearer ${SUPABASE_KEY}`,
            'Content-Type': 'application/json',
            'Prefer': 'return=representation'
          }
        }
      );
      const updatedClient = response.data[0];
      clientsCache.set(chatId, updatedClient);
      await bot.sendMessage(chatId, `‚úÖ ÿ™ŸÖ ÿ™ÿ≠ÿØŸäÿ´ ÿ±ŸÇŸÖ ÿßŸÑŸáÿßÿ™ŸÅ ÿ®ŸÜÿ¨ÿßÿ≠: ${updatedClient.phone}`);
      return;
    }

    if (!keyword) return bot.sendMessage(chatId, "ÿ£ÿ±ÿ≥ŸÑ ŸÉŸÑŸÖÿ© ŸÑŸÑÿ®ÿ≠ÿ´ üîç ŸÖÿ´ÿßŸÑ: ÿ≥ŸÉÿ±");

    // ÿßŸÑÿ®ÿ≠ÿ´ ÿπŸÜ ÿßŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™
    const response = await axios.get(`${SUPABASE_URL}/rest/v1/products?product_name=ilike.%${keyword}%`, {
      headers: { 'apikey': SUPABASE_KEY, 'Authorization': `Bearer ${SUPABASE_KEY}` }
    });
    const products = response.data;
    if (!products.length) return bot.sendMessage(chatId, `üö´ ŸÑÿß ŸäŸàÿ¨ÿØ ŸÜÿ™ÿßÿ¶ÿ¨ ŸÑŸÉŸÑŸÖÿ©: ${keyword}`);

    for (const product of products) {
      const caption = `üõí *${product.product_name}*\nüì¶ ${product.category}\nüíµ ${product.price} ŸÑ.ÿ≥`;
      const inlineKeyboard = [[{ text: `ÿßÿ∑ŸÑÿ® ÿßŸÑÿ¢ŸÜ`, callback_data: `order_${product.id}` }]];

      if (product.image_url) {
        await bot.sendPhoto(chatId, product.image_url, {
          caption,
          parse_mode: 'Markdown',
          reply_markup: { inline_keyboard: inlineKeyboard }
        });
      } else {
        await bot.sendMessage(chatId, caption, {
          parse_mode: 'Markdown',
          reply_markup: { inline_keyboard: inlineKeyboard }
        });
      }

      await new Promise(r => setTimeout(r, 800)); // ŸÑÿ™ŸÅÿßÿØŸä Too Many Requests
    }

    // ÿ•ÿ±ÿ≥ÿßŸÑ ÿ≤ÿ± ŸÖÿ¥ÿßÿ±ŸÉÿ© ÿ±ŸÇŸÖ ÿßŸÑŸáÿßÿ™ŸÅ
    const shareButton = {
      text: "ŸÖÿ¥ÿßÿ±ŸÉÿ© ÿ±ŸÇŸÖ ÿßŸÑŸáÿßÿ™ŸÅ",
      request_contact: true
    };
    await bot.sendMessage(chatId, "üì± ŸÑÿ™ÿ£ŸÉŸäÿØ ÿ∑ŸÑÿ®ŸÉ Ÿäÿ±ÿ¨Ÿâ ŸÖÿ¥ÿßÿ±ŸÉÿ© ÿ±ŸÇŸÖ Ÿáÿßÿ™ŸÅŸÉ:", {
      reply_markup: { keyboard: [[shareButton]], one_time_keyboard: true }
    });

  } catch (err) {
    console.error(err.response?.data || err.message);
    bot.sendMessage(chatId, "‚ö†Ô∏è ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ÿå ÿ≠ÿßŸàŸÑ ŸÑÿßÿ≠ŸÇŸãÿß.");
  }
});

// ÿßŸÑÿ™ÿπÿßŸÖŸÑ ŸÖÿπ ÿßŸÑÿ∂ÿ∫ÿ∑ ÿπŸÑŸâ ÿ≤ÿ± "ÿßÿ∑ŸÑÿ® ÿßŸÑÿ¢ŸÜ"
bot.on('callback_query', async (callbackQuery) => {
  const msg = callbackQuery.message;
  const chatId = msg.chat.id;
  const data = callbackQuery.data;

  if (data.startsWith('order_')) {
    try {
      const productId = parseInt(data.split('_')[1]);
      const client = clientsCache.get(chatId);
      if (!client) throw new Error("Client not found in cache");

      // ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑÿ∑ŸÑÿ®
      const orderRes = await axios.post(`${SUPABASE_URL}/rest/v1/orders`, {
        client_id: client.id, status: "pending"
      }, {
        headers: { 'apikey': SUPABASE_KEY, 'Authorization': `Bearer ${SUPABASE_KEY}`, 'Content-Type': 'application/json', 'Prefer': 'return=representation' }
      });
      const order = orderRes.data[0];

      // ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑŸÖŸÜÿ™ÿ¨ ŸÑŸÑÿ∑ŸÑÿ®
      await axios.post(`${SUPABASE_URL}/rest/v1/order_items`, {
        order_id: order.id, product_id: productId, quantity: 1
      }, {
        headers: { 'apikey': SUPABASE_KEY, 'Authorization': `Bearer ${SUPABASE_KEY}`, 'Content-Type': 'application/json' }
      });

      await bot.sendMessage(chatId,
        `‚úÖ ÿ™ŸÖ ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑŸÖŸÜÿ™ÿ¨ ÿ•ŸÑŸâ ÿ∑ŸÑÿ®ŸÉ ÿ®ŸÜÿ¨ÿßÿ≠.\nüéâ ÿ±ŸÇŸÖ ÿßŸÑÿ∑ŸÑÿ®: ${order.id}\nüë§ ÿßŸÑÿπŸÖŸäŸÑ: ${client.owner_name}\nüì± ÿßŸÑŸáÿßÿ™ŸÅ: ${client.phone}\nüöö ÿ≥Ÿäÿ™ŸÖ ÿßŸÑÿ™ŸàÿßÿµŸÑ ŸÖÿπŸÉ ŸÑŸÑÿ™ŸàÿµŸäŸÑ.`
      );

      bot.answerCallbackQuery(callbackQuery.id);

    } catch (err) {
      console.error(err.response?.data || err.message);
      bot.sendMessage(chatId, "‚ö†Ô∏è ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ÿ£ÿ´ŸÜÿßÿ° ÿ™ÿ£ŸÉŸäÿØ ÿßŸÑÿ∑ŸÑÿ®ÿå ÿ≠ÿßŸàŸÑ ŸÑÿßÿ≠ŸÇŸãÿß.");
      bot.answerCallbackQuery(callbackQuery.id);
    }
  }
});

// ÿ™ÿ¥ÿ∫ŸäŸÑ ÿßŸÑÿ≥Ÿäÿ±ŸÅÿ±
app.listen(PORT, async () => {
  console.log(`üöÄ Server running on port ${PORT}`);
  const webhookUrl = `${process.env.RENDER_EXTERNAL_URL}/webhook/${TOKEN}`;
  try {
    await bot.setWebHook(webhookUrl);
    console.log(`‚úÖ Webhook set to: ${webhookUrl}`);
  } catch (err) {
    console.error("‚ùå Error setting webhook:", err.message);
  }
});
