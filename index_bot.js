// index_bot.js
const express = require('express');
const bodyParser = require('body-parser');
const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');

const TOKEN = process.env.TELEGRAM_TOKEN;
const API_URL = process.env.API_URL || 'https://YOUR-API-SERVICE.onrender.com';
const PORT = process.env.PORT || 5000;

// ÿ•ŸÜÿ¥ÿßÿ° ÿ®Ÿàÿ™ ÿ®ÿØŸàŸÜ polling
const bot = new TelegramBot(TOKEN, { polling: false });

// ÿ•ŸÜÿ¥ÿßÿ° ÿ™ÿ∑ÿ®ŸäŸÇ Express
const app = express();
app.use(bodyParser.json());

// ÿßÿ≥ÿ™ŸÇÿ®ÿßŸÑ ÿßŸÑÿ™ÿ≠ÿØŸäÿ´ÿßÿ™ ŸÖŸÜ Telegram ÿπÿ®ÿ± Webhook
app.post(`/webhook/${TOKEN}`, (req, res) => {
  bot.processUpdate(req.body);
  res.sendStatus(200);
});

// ÿ™ÿÆÿ≤ŸäŸÜ ŸÖÿ§ŸÇÿ™ ŸÑŸÑŸÄ ÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑÿπŸÖŸäŸÑ ŸÑŸÉŸÑ chatId ŸÑÿ™ŸÇŸÑŸäŸÑ ÿßŸÑÿ∑ŸÑÿ®ÿßÿ™
const clientsCache = new Map();

bot.on('message', async (msg) => {
  const chatId = msg.chat.id;

  // ÿßŸÑÿ™ÿ≠ŸÇŸÇ ÿ•ÿ∞ÿß ŸÉÿßŸÜÿ™ ÿßŸÑÿ±ÿ≥ÿßŸÑÿ© ÿ™ÿ≠ÿ™ŸàŸä ÿπŸÑŸâ ÿ±ŸÇŸÖ ÿßŸÑŸáÿßÿ™ŸÅ (contact)
  if (msg.contact) {
    const phone = msg.contact.phone_number;

   

  const keyword = msg.text?.trim();
  if (!keyword) return bot.sendMessage(chatId, "ÿ£ÿ±ÿ≥ŸÑ ŸÉŸÑŸÖÿ© ŸÑŸÑÿ®ÿ≠ÿ´ üîç ŸÖÿ´ÿßŸÑ: ÿ≥ŸÉÿ±");

  try {
    // ÿ™ÿ≠ÿ∂Ÿäÿ± ŸÖÿπŸÑŸàŸÖÿßÿ™ ÿßŸÑÿπŸÖŸäŸÑ
    const client = {
      store_name: `ÿπŸÖŸäŸÑ_${chatId}`,
      owner_name: `${msg.from.first_name || ''} ${msg.from.last_name || ''}`.trim() || "ÿ∫Ÿäÿ± ŸÖÿπÿ±ŸàŸÅ",
      phone: null, // ÿ±ŸÇŸÖ ÿßŸÑŸáÿßÿ™ŸÅ ÿ≥ŸäŸèÿ≥ÿ¨ŸÑ ÿπŸÜÿØ ÿßŸÑÿ∂ÿ∫ÿ∑ ÿπŸÑŸâ ÿßŸÑÿ≤ÿ±
      address: "ÿ∫Ÿäÿ± ŸÖÿ≠ÿØÿØ"
    };

    let clientId = clientsCache.get(chatId);
    if (!clientId) {
      // ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿπŸÖŸäŸÑ ÿ£Ÿà ÿ¨ŸÑÿ®Ÿá ÿ•ÿ∞ÿß ŸÖŸàÿ¨ŸàÿØ
      const clientRes = await axios.post(`${API_URL}/clients`, client);
      clientId = clientRes.data.id;
      clientsCache.set(chatId, clientId);
    }

    // ÿ±ÿ≥ÿßŸÑÿ© ÿ™ÿ±ÿ≠Ÿäÿ® ÿ®ÿßŸÑÿßÿ≥ŸÖ ÿßŸÑÿ≠ŸÇŸäŸÇŸä
    await bot.sendMessage(chatId, `üëã ÿ£ŸáŸÑÿß ${client.owner_name}ÿå ŸÖÿ±ÿ≠ÿ®Ÿãÿß ÿ®ŸÉ ŸÅŸä ŸÖÿ™ÿ¨ÿ±ŸÜÿß!`, {
      reply_markup: {
        keyboard: [[{ text: "ÿ¥ÿßÿ±ŸÉ ÿ±ŸÇŸÖ Ÿáÿßÿ™ŸÅŸÉ üì±", request_contact: true }]],
        one_time_keyboard: true
      }
    });

    // ÿßŸÑÿ®ÿ≠ÿ´ ÿπŸÜ ÿßŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™
    const response = await axios.get(`${API_URL}/products/search?keyword=${encodeURIComponent(keyword)}`);
    const products = response.data;

    if (!products.length) return bot.sendMessage(chatId, `üö´ ŸÑÿß ŸäŸàÿ¨ÿØ ŸÜÿ™ÿßÿ¶ÿ¨ ŸÑŸÉŸÑŸÖÿ©: ${keyword}`);

    for (const product of products) {
      const caption = `üõí *${product.product_name}*\nüì¶ ${product.category}\nüíµ ${product.price} ŸÑ.ÿ≥`;
      const inlineKeyboard = [[{ text: `ÿßÿ∑ŸÑÿ® ÿßŸÑÿ¢ŸÜ`, callback_data: `order_${product.id}` }]];

      if (product.image_url) {
        await bot.sendPhoto(chatId, product.image_url, {
          caption,
          parse_mode: 'Markdown',
          reply_markup: { inline_keyboard: inlineKeyboard }
        });
      } else {
        await bot.sendMessage(chatId, caption, {
          parse_mode: 'Markdown',
          reply_markup: { inline_keyboard: inlineKeyboard }
        });
      }

      // ÿ™ÿ£ÿÆŸäÿ± ÿ®ÿ≥Ÿäÿ∑ ŸÑÿ™ŸÅÿßÿØŸä Too Many Requests
      await new Promise(resolve => setTimeout(resolve, 800));
    }

  } catch (err) {
    console.error(err.response?.data || err.message);
    bot.sendMessage(chatId, "‚ö†Ô∏è ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ŸÅŸä ÿßŸÑÿ®ÿ≠ÿ´ÿå ÿ≠ÿßŸàŸÑ ŸÑÿßÿ≠ŸÇŸãÿß.");
  }
});

// ÿßŸÑÿ™ÿπÿßŸÖŸÑ ŸÖÿπ ÿßŸÑÿ∂ÿ∫ÿ∑ ÿπŸÑŸâ ÿ≤ÿ± "ÿßÿ∑ŸÑÿ® ÿßŸÑÿ¢ŸÜ"
bot.on('callback_query', async (callbackQuery) => {
  const msg = callbackQuery.message;
  const chatId = msg.chat.id;
  const data = callbackQuery.data;

  if (data.startsWith('order_')) {
    const productId = parseInt(data.split('_')[1]);

    try {
      const clientData = clientsCache.get(chatId);
      if (!clientData) throw new Error("Client not found in cache");

      const orderRes = await axios.post(`${API_URL}/orders/init`, { client_id: clientData.id });
      const orderId = orderRes.data.id;

      await axios.post(`${API_URL}/order_items`, { order_id: orderId, product_id: productId, quantity: 1 });

      await bot.sendMessage(
        chatId,
        `‚úÖ ÿ™ŸÖ ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑŸÖŸÜÿ™ÿ¨ ÿ•ŸÑŸâ ÿ∑ŸÑÿ®ŸÉ ÿ®ŸÜÿ¨ÿßÿ≠.\nüéâ ÿ±ŸÇŸÖ ÿßŸÑÿ∑ŸÑÿ®: ${orderId}\nüë§ ÿßŸÑÿπŸÖŸäŸÑ: ${clientData.owner_name}\nüì± ÿßŸÑŸáÿßÿ™ŸÅ: ${clientData.phone}\nüöö ÿ≥Ÿäÿ™ŸÖ ÿßŸÑÿ™ŸàÿßÿµŸÑ ŸÖÿπŸÉ ŸÑŸÑÿ™ŸàÿµŸäŸÑ.`
      );

      bot.answerCallbackQuery(callbackQuery.id);
    } catch (err) {
      console.error(err.response?.data || err.message);
      bot.sendMessage(chatId, "‚ö†Ô∏è ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ÿ£ÿ´ŸÜÿßÿ° ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿ∑ŸÑÿ®ÿå ÿ≠ÿßŸàŸÑ ŸÑÿßÿ≠ŸÇŸãÿß.");
      bot.answerCallbackQuery(callbackQuery.id);
    }
  }
});

// ÿ™ÿ¥ÿ∫ŸäŸÑ ÿßŸÑÿ≥Ÿäÿ±ŸÅÿ±
app.listen(PORT, async () => {
  console.log(`üöÄ Server running on port ${PORT}`);

  const webhookUrl = `${process.env.RENDER_EXTERNAL_URL}/webhook/${TOKEN}`;
  try {
    await bot.setWebHook(webhookUrl);
    console.log(`‚úÖ Webhook set to: ${webhookUrl}`);
  } catch (err) {
    console.error("‚ùå Error setting webhook:", err.message);
  }
});


