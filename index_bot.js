// index_bot.js
const express = require('express');
const bodyParser = require('body-parser');
const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');

const TOKEN = process.env.TELEGRAM_TOKEN;
const API_URL = process.env.API_URL; // ÿ±ÿßÿ®ÿ∑ API ÿßŸÑÿÆÿßÿµ ÿ®ŸÉ ÿπŸÑŸâ Render
const PORT = process.env.PORT || 5000;

if (!TOKEN || !API_URL) {
  console.error("‚ùå Ÿäÿ¨ÿ® ÿ™ÿ≠ÿØŸäÿØ TELEGRAM_TOKEN Ÿà API_URL ŸÅŸä ÿßŸÑŸÖÿ™ÿ∫Ÿäÿ±ÿßÿ™ ÿßŸÑÿ®Ÿäÿ¶Ÿäÿ©!");
  process.exit(1);
}

// ÿ•ŸÜÿ¥ÿßÿ° ÿ®Ÿàÿ™ ÿ®ÿØŸàŸÜ polling
const bot = new TelegramBot(TOKEN, { polling: false });

// ÿ•ŸÜÿ¥ÿßÿ° ÿ™ÿ∑ÿ®ŸäŸÇ Express
const app = express();
app.use(bodyParser.json());

// ÿßÿ≥ÿ™ŸÇÿ®ÿßŸÑ ÿßŸÑÿ™ÿ≠ÿØŸäÿ´ÿßÿ™ ŸÖŸÜ Telegram ÿπÿ®ÿ± Webhook
app.post(`/webhook/${TOKEN}`, (req, res) => {
  bot.processUpdate(req.body);
  res.sendStatus(200);
});

// cache ŸÑÿ™ÿÆÿ≤ŸäŸÜ clientId ŸÑŸÉŸÑ chatId
const clientsCache = new Map();

// ÿØÿßŸÑÿ© ŸÑÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿπŸÖŸäŸÑ ÿ£Ÿà ÿ¨ŸÑÿ®Ÿá ÿ•ÿ∞ÿß ŸÖŸàÿ¨ŸàÿØ ŸÖÿ≥ÿ®ŸÇŸãÿß
async function getClientId(chatId, msg) {
  let clientId = clientsCache.get(chatId);
  if (clientId) return clientId;

  bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const keyword = msg.text?.trim();
    if (!keyword) return bot.sendMessage(chatId, "ÿ£ÿ±ÿ≥ŸÑ ŸÉŸÑŸÖÿ© ŸÑŸÑÿ®ÿ≠ÿ´ üîç ŸÖÿ´ÿßŸÑ: ÿ≥ŸÉÿ±");

    // ÿ™ÿ≠ÿ∂Ÿäÿ± ŸÖÿπŸÑŸàŸÖÿßÿ™ ÿßŸÑÿπŸÖŸäŸÑ
    const client = {
        store_name: `ÿπŸÖŸäŸÑ_${chatId}`,
        owner_name: `${msg.from.first_name || ''} ${msg.from.last_name || ''}`.trim() || "ÿ∫Ÿäÿ± ŸÖÿπÿ±ŸàŸÅ",
        phone: msg.from.username ? `@${msg.from.username}` : `tg_${chatId}`,
        address: "ÿ∫Ÿäÿ± ŸÖÿ≠ÿØÿØ"
    };

    try {
        let clientId = clientsCache.get(chatId);

        if (!clientId) {
            // ŸÖÿ≠ÿßŸàŸÑÿ© ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿπŸÖŸäŸÑ
            let clientRes;
            try {
                clientRes = await axios.post(`${API_URL}/clients`, client, {
                    headers: { 'Content-Type': 'application/json' }
                });
            } catch (err) {
                // ÿßŸÑÿ™ÿ≠ŸÇŸÇ ÿ•ÿ∞ÿß ÿßŸÑÿßÿ≥ÿ™ÿ¨ÿßÿ®ÿ© ŸÑŸäÿ≥ÿ™ JSON
                if (err.response && err.response.headers['content-type']?.includes('text/html')) {
                    console.error("‚ùå API /clients ÿ£ÿπÿßÿØ HTML ÿ®ÿØŸÑ JSON. ÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ API_URL ÿ£Ÿà endpoint!");
                    await bot.sendMessage(chatId, "‚ö†Ô∏è ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ŸÅŸä ÿßŸÑÿ™ŸàÿßÿµŸÑ ŸÖÿπ ÿÆÿØŸÖÿ© ÿßŸÑÿπŸÖŸÑÿßÿ°ÿå ÿ≠ÿßŸàŸÑ ŸÑÿßÿ≠ŸÇŸãÿß.");
                    return;
                }

                if (err.response?.status === 409) {
                    // ÿßŸÑÿπŸÖŸäŸÑ ŸÖŸàÿ¨ŸàÿØ ŸÖÿ≥ÿ®ŸÇÿßŸãÿå ŸÜÿ¨ŸÑÿ®Ÿá
                    clientRes = await axios.get(`${API_URL}/clients/byPhone/${client.phone}`);
                } else {
                    throw err;
                }
            }

            if (!clientRes || !clientRes.data) {
                console.error("‚ùå ŸÑŸÖ Ÿäÿ™ŸÖ ÿßÿ≥ÿ™ÿ±ÿ¨ÿßÿπ ÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑÿπŸÖŸäŸÑ ŸÖŸÜ API");
                await bot.sendMessage(chatId, "‚ö†Ô∏è ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ÿ£ÿ´ŸÜÿßÿ° ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿπŸÖŸäŸÑÿå ÿ≠ÿßŸàŸÑ ŸÑÿßÿ≠ŸÇŸãÿß.");
                return;
            }

            clientId = clientRes.data.id;
            clientsCache.set(chatId, clientId);
        }

        // ÿ±ÿ≥ÿßŸÑÿ© ÿ™ÿ±ÿ≠Ÿäÿ® ÿØÿßÿ¶ŸÖŸãÿß
        await bot.sendMessage(chatId, `üëã ÿ£ŸáŸÑÿß ${client.owner_name || "ÿπŸÖŸäŸÑ"}ÿå ŸÖÿ±ÿ≠ÿ®Ÿãÿß ÿ®ŸÉ ŸÅŸä ŸÖÿ™ÿ¨ÿ±ŸÜÿß!`);

    // ÿßŸÑÿ®ÿ≠ÿ´ ÿπŸÜ ÿßŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™
    const response = await axios.get(`${API_URL}/products/search?keyword=${encodeURIComponent(keyword)}`);
    const products = response.data;

    if (!products.length) return bot.sendMessage(chatId, `üö´ ŸÑÿß ŸäŸàÿ¨ÿØ ŸÜÿ™ÿßÿ¶ÿ¨ ŸÑŸÉŸÑŸÖÿ©: ${keyword}`);

    for (const product of products) {
      const caption = `üõí *${product.product_name}*\nüì¶ ${product.category}\nüíµ ${product.price} ŸÑ.ÿ≥`;
      const inlineKeyboard = [[{ text: `ÿßÿ∑ŸÑÿ® ÿßŸÑÿ¢ŸÜ`, callback_data: `order_${product.id}` }]];

      if (product.image_url) {
        await bot.sendPhoto(chatId, product.image_url, {
          caption,
          parse_mode: 'Markdown',
          reply_markup: { inline_keyboard: inlineKeyboard }
        });
      } else {
        await bot.sendMessage(chatId, caption, {
          parse_mode: 'Markdown',
          reply_markup: { inline_keyboard: inlineKeyboard }
        });
      }
    }
  } catch (err) {
    console.error(err.response?.data || err.message);
    bot.sendMessage(chatId, "‚ö†Ô∏è ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ŸÅŸä ÿßŸÑÿ®ÿ≠ÿ´ÿå ÿ≠ÿßŸàŸÑ ŸÑÿßÿ≠ŸÇŸãÿß.");
  }
});

// ÿßŸÑÿ™ÿπÿßŸÖŸÑ ŸÖÿπ ÿßŸÑÿ∂ÿ∫ÿ∑ ÿπŸÑŸâ ÿ≤ÿ± "ÿßÿ∑ŸÑÿ® ÿßŸÑÿ¢ŸÜ"
bot.on('callback_query', async (callbackQuery) => {
  const msg = callbackQuery.message;
  const chatId = msg.chat.id;
  const data = callbackQuery.data;

  if (!data.startsWith('order_')) return;

  const productId = parseInt(data.split('_')[1]);

  try {
    const clientId = clientsCache.get(chatId);
    if (!clientId) throw new Error("Client not found in cache");

    // ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑÿ∑ŸÑÿ®
    const orderRes = await axios.post(`${API_URL}/orders/init`, { client_id: clientId });
    const orderId = orderRes.data.id;

    // ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑŸÖŸÜÿ™ÿ¨ ŸÑŸÑÿ∑ŸÑÿ®
    await axios.post(`${API_URL}/order_items`, { order_id: orderId, product_id: productId, quantity: 1 });

    await bot.sendMessage(chatId,
      `‚úÖ ÿ™ŸÖ ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑŸÖŸÜÿ™ÿ¨ ÿ•ŸÑŸâ ÿ∑ŸÑÿ®ŸÉ ÿ®ŸÜÿ¨ÿßÿ≠.\nüéâ ÿ±ŸÇŸÖ ÿßŸÑÿ∑ŸÑÿ®: ${orderId}\nüöö ÿ≥Ÿäÿ™ŸÖ ÿßŸÑÿ™ŸàÿßÿµŸÑ ŸÖÿπŸÉ ŸÑŸÑÿ™ŸàÿµŸäŸÑ.`);

    bot.answerCallbackQuery(callbackQuery.id);
  } catch (err) {
    console.error(err.response?.data || err.message);
    bot.sendMessage(chatId, "‚ö†Ô∏è ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ÿ£ÿ´ŸÜÿßÿ° ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿ∑ŸÑÿ®ÿå ÿ≠ÿßŸàŸÑ ŸÑÿßÿ≠ŸÇŸãÿß.");
    bot.answerCallbackQuery(callbackQuery.id);
  }
});

// ÿ™ÿ¥ÿ∫ŸäŸÑ ÿßŸÑÿ≥Ÿäÿ±ŸÅÿ±
app.listen(PORT, async () => {
  console.log(`üöÄ Server running on port ${PORT}`);

  const webhookUrl = `${process.env.RENDER_EXTERNAL_URL}/webhook/${TOKEN}`;
  try {
    await bot.setWebHook(webhookUrl);
    console.log(`‚úÖ Webhook set to: ${webhookUrl}`);
  } catch (err) {
    console.error("‚ùå Error setting webhook:", err.message);
  }
});

